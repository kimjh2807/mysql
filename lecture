1일차

셋째날은
데이터베이스는 쉬워요. 잘 하기는 어려워요.
어떻게 하면 좋은 데이터베이스를 만들 수 있을까, 산업에서 잘 정리해 놓은 방법이 있음, 데이터 모델링

후킹

데이터베이스가 처음 이신 분은 뒤로 갈 수록 어려워져요.
그런 분들은 그냥 구경하는 겁니다. 
이런 키워드들이 있겠구나, 편하게 들으면 됩니다.

중급이신 분들, 중급으로 갈려고 하시는 분들은
강약조절을 현명하게 하면서 하시면 좋겠음

인간이 수동으로 할 수 있는 것을 자동화한다.

생활코딩 활동을 처음 시작했을 때, 블로그에 쓸려고 했는데, 블로그는 강의에 잘 안 맞았음
생활코딩 사이트를 만들었고, 저의 강의는 생활코딩 사이트를 만드는 것에 대한 것들이 많음

구조화(structured)된 이라는 의미를 잘 이해해야 함
어떤 정보를 구조화시킬 것인지 우리는 잘 알고 있음

구조화된 정보들을 다루는 정보시스템을 데이터베이스라고 함
구조화시켰을 때, 장점은? (엑셀)
- 보기좋다
- 한 컬럼을 숨기기할 수 있음
- 정렬도 할 수 있음 등등

엑셀 같은 프로그램이 잘 되어 있는데, 데이터베이스는 왜 사용하는가?
엑셀과 데이터베이스를 구분

스프레드시트는 한계가 있음
- 행이 6만 몇 줄까지만 있음
- 데이터를 넣을 때 수동으로 넣는데

데이터베이스는
- 어마어마하게 많은 데이터를 안정적으로 저장할 수 있음 (엑셀로는 상상도 할 수 없는 규모)
- 자동화된 처리를 할 수 있음

이 세상에는 굉장히 다양한 데이터베이스가 있어요.
그래프 DB
문서형 DB
객체형 DB
관계형 DB

우리 수업에서 배우는 데이터베이스 관계형 DB임
1970년대부터 시작되었음, 정체성에 대혼란이 있었고, 관계형 DB가 1등을 함

관계형 DB는
데이터를 표의 관점으로 봄

최근에 관계형 데이터베이스가 우수한
관계형 데이터베이스에 맞지 않는 데이터도 있음

대표적으로 페이스북 같은 데이터는 표에 정리하기가 어려워
오랬동안 관계형 디비가 시장을 장악했지만, 10년전부터 NoSQL(not only sql)이 나옴

혜성처럼 등장한 몽고DB, Redis, Cassandra 등등 다양한 데이터베이스에 대한 논의가 있었는데,
최근에 또 AI 이런 쪽으로 관심이 이동했음

그렇게 되면서, 몽고DB가 점유율이 떨어지고 있다.
관계형 DB가 떨어질 거라 했는데, 다시 지속되고 있음, 훌륭한 정보시스템으로 검증됨,

그렇다고 관계형DB가 다는 아니고, 다른 DB가 더 편할 수 있다. SNS같은 서비스는 NoSQL이 더 좋음

남들이 많이 사용하면 -> 같이 사용할 수 밖에 없어

오라클, MS SQL Server는 비용이 비싸, 은행, 기업에서 사용 (신뢰성이 높아)
MySQL은 

오라클이 1970년부터 DB 상용화하면서 시장을 장악
MySQL이 등장하고, 웹서비스에 활용되면서 -> 동반성장하면서 대등한 수준까지 올라옴
몇 년전에 MySQL사를 썬이 인수하고 썬을 오라클에서 인수하게 됨

정보기술의 인프라할 수 있는 3강 중 1강 오라클, 2강 MySQL이 오라클로 들어감
오라클에 반발이 많이 심해짐

MySQL 개발자가 MariaDB를 다시 만들음 
코드를 다시 짰음 - MySQL과 호환됨
아마존에서 오로라를 만들었고, MySQL과 호환됨

MySQL의 시대가 올 것이라고 생각함 (이고잉)

정보기술을 배울 때, 꼭 따져보는게 있어요.
- Install & Run (설치하고 실행해 보는 것)
- Create, Read, Update, Delete
- GROUP & CONNECT

핵(본질, 기본, 기초)을 중심으로 지식화가 됨, 점점 더 커짐, 어느 수준까지 올라감

DB는 배우기는 어렵지만, 한계가 없다.

MySQL은
- 보안 인증을 받아야 함
- root / 111111

2차원으로 표현할 수 있으면 거기서 상당히 많은 인사이트를 얻을 수 있어요.
데카르트 x, y 좌표!, 회계사들이 만든 표!

표가 왜 테이블이냐?
중세 시대에 회계사들이 돈을 세어야 하는데, 테이블에 선을 그어놓고 돈을 카운트 했음 -> 그래서 테이블

정보가 많아지면, 관리가 어려워져 -> 폴더를 만들고, 연관된 것들을 거기에 넣는다.
데이터가 어마어마하게 많아지면 표들을 그룹핑한 폴더

데이터베이스(전체)
데이터베이스(MySQL), 스키마

검색을 할 수 있어야 하고, 
매뉴얼을 볼 수 있어야 함

데이터베이스를 깔고, 명령어를 통해 실행시키고, 데어터베이스에 접속
메모장에 명령어를 쓰고, 복사해서 실행

# 테이블 만들기
CREATE TABLE topic (
	id INT(11),
	title VARCHAR(50),
	description TEXT,
	created DATETIME,
	author_name VARCHAR(20),
	author_profile VARCHAR(100)	
);

정보기술은 사소한 것에 들어가지 않음
실수하면, 진짜 심각한 것은 타격이 온다면 수동으로 하지 않음

엑셀은 기본적으로 관대해, 데이터를 저장할 때 편한데, 끄낼 때는 힘들어
애플리케이션을 개발해 보면, 숫자가 저장되어 있는지, 문자가 저장되어 있는지 모르면 끄낼 때마다 확인해야 함

엑셀은 종이컵, 데이터베이스는 물병으로 비유
까다로움이 공감되면 고마워
데이터베이스는 엄격하게 데이터를 관리함

회사에서 SQL을 가르치면서, 생활코딩의 시작이 됨
데이터베이스에 인생을 갈아넣지 않더라도, 
SQL은 Structured Query Language (구조화된 질의 언어)

# 테이블에 데이터 추가하기
INSERT INTO topic
	(id, title, description, created, author_name, author_profile)
	VALUES(
		1,
		'MySQL',
		'MySQL is ...',
		NOW(),
		'egoing',
		'developer'
	);
	
INSERT INTO topic
	(id, title, description, created, author_name, author_profile)
	VALUES(
		2,
		'Oracle',
		'Oracle is ...',
		NOW(),
		'egoing',
		'developer'
	);
	
INSERT INTO topic
	(id, title, description, created, author_name, author_profile)
	VALUES(
		3,
		'SQL Server',
		'SQL Server ...',
		NOW(),
		'duru',
		'DBA'
	);

INSERT INTO topic
	(id, title, description, created, author_name, author_profile)
	VALUES(
		4,
		'MongoDB',
		'MongoDB is ...',
		NOW(),
		'khan',
		'NoSQL DBA'
	);

# Read
내가 가져오고 싶은 데이터를 선택한다.

SELECT *
FROM topic;

SELECT * 
FROM topic
WHERE id = 1;

